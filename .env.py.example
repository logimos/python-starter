# src/alembic/env.py

# Path Insertion: Added code to put your project's root directory (src/) into sys.path so Python can find src.app.core.config and src.app.models.
# Imports: Imported your settings object and the Base model. Crucially, import src.app.models ensures that all modules within that package (like item.py) are loaded, registering their models with Base.metadata.
# Set sqlalchemy.url: Explicitly set the database URL on the config object using config.set_main_option("sqlalchemy.url", settings.DATABASE_URL).   
# Set target_metadata: Assigned Base.metadata to target_metadata.
# Online Mode Options: Added compare_type=True and compare_server_default=True within run_migrations_online's context.configure call. These improve the accuracy of --autogenerate.

import os
import sys
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool
from sqlalchemy.engine import Connection # Import Connection type hint

from alembic import context

# --- Add this ---
# Insert the project root directory into the Python path
# This allows Alembic to find your application modules (like config and models)
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
sys.path.insert(0, PROJECT_ROOT)

# Import your application's Base model metadata and settings
from src.app.core.config import settings # Import your Pydantic settings
from src.app.models.base import Base     # Import your SQLAlchemy Base class
# Import all models here so Base.metadata knows about them
import src.app.models # noqa - This import ensures models are registered

# --- End Add this ---


# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# --- Add this ---
# Set the sqlalchemy.url from your Pydantic settings
# This overrides the (commented out) value in alembic.ini
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)
# --- End Add this ---


# Interpret the config file for Python logging.
# This line reads the logging configuration from the .ini file.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
# --- Modify this ---
target_metadata = Base.metadata # Use the metadata from your imported Base
# --- End Modify this ---

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        # Add naming convention for offline mode if needed
        # compare_type=True, # Example: Enable type comparison
        # include_schemas=True, # If using multiple schemas
        # compare_server_default=True, # Compare server defaults
        # render_as_batch=True, # For SQLite support
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    # Get the engine configuration from alembic.ini, using the URL we set earlier
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}), # Use default section name
        prefix="sqlalchemy.", # Prefix for sqlalchemy settings in ini file
        poolclass=pool.NullPool, # Use NullPool for migration script execution
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            # Add necessary options for online mode, especially for autogenerate
            compare_type=True, # Recommended for autogenerate accuracy
            compare_server_default=True, # Recommended for autogenerate accuracy
            # include_schemas=True, # If using multiple schemas
            # render_as_batch=True, # For SQLite support
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()