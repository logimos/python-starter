[tool.poetry]
name = "python-starter-template" # Choose a suitable name
version = "0.1.0"
description = "A robust Python starter template with FastAPI, Celery, testing, linting, typing, and Docker."
authors = ["Your Name <your.email@example.com>"] # CHANGE THIS
license = "MIT"
readme = "README.md"
packages = [{include = "app", from = "src"}] # Assumes source code is in src/app

[tool.poetry.dependencies]
python = "^3.10" # Locked to Python 3.10.x

# Core Frameworks
fastapi = "^0.111.0"
uvicorn = {extras = ["standard"], version = "^0.29.0"} # ASGI server for FastAPI
celery = "^5.4.0"
redis = "^5.0.4" # Broker/Backend for Celery, also general caching

# Env Vars & Settings Management
pydantic-settings = "^2.2.1"

# Database (Postgres)
sqlalchemy = "^2.0.30" # Core ORM features
psycopg = {version = "^3.1.19", extras = ["binary"]} # Modern Postgres driver (binary includes C extensions)
alembic = "^1.13.1" # Database migrations

# Utilities
requests = "^2.31.0" # Common HTTP client (example)

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
pytest-cov = "^5.0.0"   # For test coverage reporting
httpx = "^0.27.0"       # Async HTTP client for testing FastAPI
freezegun = "^1.5.1"  # For mocking time in tests

# Linting & Formatting & Typing
ruff = "^0.4.8"         # Fast linter & formatter (replaces flake8, isort, black, etc.)
mypy = "^1.10.0"        # Static type checker

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# --- Tool Configuration ---

[tool.ruff]
line-length = 88
target-version = "py310" # Match python version

# See https://docs.astral.sh/ruff/rules/ for all rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort (import sorting)
    "UP", # pyupgrade
    "B",  # flake8-bugbear (potential logic errors)
    "C4", # flake8-comprehensions (nicer comprehensions)
    "SIM",# flake8-simplify
    "TID",# flake8-tidy-imports
    "ARG",# flake8-unused-arguments
    "ANN",# flake8-annotations (requires type hints)
    # "D",  # pydocstyle (if you want docstring enforcement)
]
# ignore = [
#     "ANN101", # Ignore missing type hints for self/cls in methods (can be noisy)
#     "ANN102", # Ignore missing type hints for cls in classmethods
#     "ANN401", # Allow `Any` type usage (can enable later for stricter typing)
# ]
fixable = ["ALL"] # Allow auto-fixing for all possible rules

[tool.ruff.format]
quote-style = "double"
# Ruff's formatter can replace Black if enabled

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Start with this, gradually add stubs/types
disallow_untyped_defs = true  # Force type hints on function definitions
disallow_incomplete_defs = true # Force all parts of a function signature to be annotated
# For stricter checking later:
# disallow_any_unimported = true
# disallow_any_explicit = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=app --cov-report=term-missing --cov-fail-under=80" # Example: require 80% coverage
testpaths = [
    "tests",
]
python_files = "test_*.py"

[tool.coverage.run]
omit = [
    "*/tests/*",      # Don't measure coverage of test files themselves
    "*/__main__.py",
    "*/alembic/*",    # Exclude auto-generated migration files
    "src/app/core/config.py" # Often hard to meaningfully test settings loading
]